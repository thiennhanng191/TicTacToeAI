#BlueJ class context
comment0.target=TicGame
comment0.text=\ \r\n\ Representing\ a\ TicTacToe\ game.\r\n\ @author\ Nhan\ Nguyen\r\n\ @version\ CMPU-102-Homework2\ 2.0\r\n
comment1.params=boardSize
comment1.target=TicGame(int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ TicGame.\r\n\ @param\ boardSize\ the\ size\ of\ the\ board;\ the\ board\ will\ have\ the\ size\ of\ \r\n\ \ \ \ boardSize\ x\ boardSize\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ \r\n\ create\ the\ visual\ of\ the\ game\ board\ of\ a\ tictactoe\ game.\ \r\n\ @return\ a\ string\ representing\ the\ game\ board\ in\ the\ format\ of\ a\ tictactoe's\ game\ board.\r\n
comment2.params=move\ symbol
comment2.target=boolean\ executeMove(TicMove,\ char)
comment2.text=\r\n\ executes\ a\ move,\ given\ a\ move\ and\ a\ symbol\ that\ represents\ a\ move.\r\n\ \ \ \ return\ false\ if\ the\ provided\ move\ is\ invalid.\r\n\ @param\ move\ a\ TicMove.\r\n\ @param\ symbol\ a\ character\ symbol\ representing\ a\ move.\r\n\ @return\ true\ if\ the\ move\ is\ valid,\ false\ otherwise.\r\n
comment3.params=
comment3.target=int\ getBoardSize()
comment3.text=\ \r\n\ returns\ the\ size\ of\ the\ board.\ \r\n\ @return\ size\ of\ the\ board.\r\n
comment4.params=
comment4.target=char\ getGameResult()
comment4.text=\r\n\ return\ the\ result\ of\ the\ game\ after\ it\ is\ over\ in\ the\ form\ of\ a\ character\:\ '?'\ means\ the\ game\ is\ not\ over\ yet;\ \r\n\ \ \ \ "D"\ means\ that\ there\ is\ a\ draw;\ 'X'\ means\ that\ the\ user\ wins;\ 'O'\ means\ that\ the\ cpu\ wins.\ \r\n\ @return\ a\ character\ representing\ the\ game\ result.\r\n
comment5.params=
comment5.target=boolean\ isGameOver()
comment5.text=\r\n\ check\ the\ conditions\ that\ would\ make\ the\ game\ over.\r\n\ @return\ true\ if\ there's\ a\ row,\ a\ column\ or\ diagonal\ full\ of\ the\ same\ item\r\n\ \ \ \ or\ when\ the\ entire\ board\ is\ filled;\ false\ otherwise.\r\n
comment6.params=move
comment6.target=boolean\ isValidMove(TicMove)
comment6.text=\r\n\ check\ if\ a\ move\ is\ valid\ move,\ that\ is\ if\ the\ move\ is\ inside\ the\ range\ of\ the\ board\r\n\ \ \ \ and\ it\ hasn't\ been\ played\ before\ by\ either\ the\ cpu\ or\ human.\r\n\ @param\ move\ a\ TicMove,\ either\ of\ the\ cpu\ or\ human.\ \r\n\ @return\ true\ if\ the\ input\ move\ is\ valid,\ false\ otherwise.\r\n
comment7.params=
comment7.target=int\ countTurn()
comment7.text=\r\n\ count\ how\ many\ turns\ (how\ many\ moves)\ have\ been\ played\r\n\ @return\ the\ number\ of\ turns\ \r\n
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Compute\ a\ single-player\ game\ of\ TicTacToe\ and\ keep\ running\ consecutive\ games\ until\ the\ \r\n\ \ \ \ user\ quits.\ If\ the\ user\ quits,\ the\ winning\ statistics\ will\ be\ printed.\ \r\n\ @param\ args\ the\ first\ argument\ stands\ for\ the\ wanted\ size\ of\ the\ game\ board,\ which\ should\ be\ an\ integer\r\n\ \ \ \ in\ [1,9].\ If\ the\ provided\ board\ size\ does\ not\ satisfy\ the\ requirements\ or\ if\ there's\ no\ argument\ provided,\r\n\ \ \ \ a\ default\ game\ board\ size\ of\ 3x3\ will\ be\ constructed\r\n
comment9.params=
comment9.target=void\ resetGame()
comment9.text=\ \r\n\ reset\ the\ game\ by\ creating\ an\ empty\ board.\r\n
numComments=11
